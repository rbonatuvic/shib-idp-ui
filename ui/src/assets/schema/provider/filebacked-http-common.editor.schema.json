{
    "type": "object",
    "order": [
        "name",
        "@type",
        "xmlId",
        "metadataURL",
        "initializeFromBackupFile",
        "backingFile",
        "backupFileInitNextRefreshDelay",
        "requireValidMetadata",
        "failFastInitialization",
        "useDefaultPredicateRegistry",
        "satisfyAnyPredicates"
    ],
    "required": [
        "xmlId",
        "metadataURL"
    ],
    "dependencies": {
        "initializeFromBackupFile": {"required": ["backingFile", "backupFileInitNextRefreshDelay"]}
    },
    "anyOf": [
        {
            "properties": {
                "initializeFromBackupFile": {
                    "enum": [
                        true
                    ]
                }
            },
            "required": [
                "backingFile",
                "backupFileInitNextRefreshDelay"
            ]
        },
        {
            "properties": {
                "initializeFromBackupFile": {
                    "enum": [
                        false
                    ]
                }
            }
        }
    ],
    "fieldsets": [
        {
            "type": "section",
            "fields": [
                "name",
                "@type"
            ]
        },
        {
            "fields": [
                "xmlId",
                "metadataURL",
                "initializeFromBackupFile",
                "backingFile",
                "backupFileInitNextRefreshDelay",
                "requireValidMetadata",
                "failFastInitialization",
                "useDefaultPredicateRegistry",
                "satisfyAnyPredicates"
            ]
        }
    ],
    "properties": {
        "name": {
            "title": "Metadata Provider Name (Dashboard Display Only)",
            "description": "Metadata Provider Name",
            "type": "string",
            "widget": {
                "id": "string",
                "help": "Must be unique."
            }
        },
        "@type": {
            "title": "Metadata Provider Type",
            "description": "Metadata Provider Type",
            "placeholder": "Select a metadata provider type",
            "type": "string",
            "readOnly": true,
            "widget": {
                "id": "select",
                "disabled": true
            },
            "oneOf": [
                {
                    "enum": [
                        "FileBackedHttpMetadataResolver"
                    ],
                    "description": "FileBackedHttpMetadataProvider"
                }
            ]
        },
        "xmlId": {
            "title": "ID",
            "description": "Identifier for logging, identification for command line reload, etc.",
            "type": "string",
            "default": "",
            "minLength": 1
        },
        "metadataURL": {
            "title": "Metadata URL",
            "description": "Identifier for logging, identification for command line reload, etc.",
            "type": "string",
            "default": "",
            "minLength": 1
        },
        "initializeFromBackupFile": {
            "title": "Initialize From Backup File?",
            "description": "Flag indicating whether initialization should first attempt to load metadata from the backup file.  If true, foreground initialization will be performed by loading the backing file, and then a refresh from the remote HTTP server will be scheduled to execute in a background thread, after a configured delay. This can improve IdP startup times when the remote HTTP file is large in size.",
            "type": "boolean",
            "widget": {
                "id": "boolean-radio"
            },
            "oneOf": [
                {
                    "enum": [
                        true
                    ],
                    "description": "True"
                },
                {
                    "enum": [
                        false
                    ],
                    "description": "False"
                }
            ],
            "default": true
        },
        "backingFile": {
            "title": "Backing File",
            "description": "Specifies where the backing file is located. If the remote server is unavailable at startup, the backing file is loaded instead.",
            "type": "string",
            "default": "",
            "visibleIf": {
                "initializeFromBackupFile": [
                    true
                ]
            }
        },
        "backupFileInitNextRefreshDelay": {
            "title": "Backup File Init Next Refresh Delay",
            "description": "Delay duration after which to schedule next HTTP refresh when initialized from the backing file.",
            "type": "string",
            "visibleIf": {
                "initializeFromBackupFile": [
                    true
                ]
            }
        },
        "requireValidMetadata": {
            "title": "Require Valid Metadata?",
            "description": "Whether candidate metadata found by the resolver must be valid in order to be returned (where validity is implementation specific, but in SAML cases generally depends on a validUntil attribute.) If this flag is true, then invalid candidate metadata will not be returned.",
            "type": "boolean",
            "widget": {
                "id": "boolean-radio"
            },
            "oneOf": [
                {
                    "enum": [
                        true
                    ],
                    "description": "True"
                },
                {
                    "enum": [
                        false
                    ],
                    "description": "False"
                }
            ],
            "default": true
        },
        "failFastInitialization": {
            "title": "Fail Fast Initialization?",
            "description": "Whether to fail initialization of the underlying MetadataResolverService (and possibly the IdP as a whole) if the initialization of a metadata provider fails. When false, the IdP may start, and will continue to attempt to reload valid metadata if configured to do so, but operations that require valid metadata will fail until it does.",
            "type": "boolean",
            "widget": {
                "id": "boolean-radio"
            },
            "oneOf": [
                {
                    "enum": [
                        true
                    ],
                    "description": "True"
                },
                {
                    "enum": [
                        false
                    ],
                    "description": "False"
                }
            ],
            "default": true
        },
        "useDefaultPredicateRegistry": {
            "title": "Use Default Predicate Registry?",
            "description": "Whether to fail initialization of the underlying MetadataResolverService (and possibly the IdP as a whole) if the initialization of a metadata provider fails. When false, the IdP may start, and will continue to attempt to reload valid metadata if configured to do so, but operations that require valid metadata will fail until it does.",
            "type": "boolean",
            "widget": {
                "id": "boolean-radio"
            },
            "oneOf": [
                {
                    "enum": [
                        true
                    ],
                    "description": "True"
                },
                {
                    "enum": [
                        false
                    ],
                    "description": "False"
                }
            ],
            "default": true
        },
        "satisfyAnyPredicates": {
            "title": "Satisy Any Predicates?",
            "description": "Flag which determines whether predicates used in filtering are connected by a logical 'OR' (true) or by logical 'AND' (false).",
            "type": "boolean",
            "widget": {
                "id": "boolean-radio"
            },
            "oneOf": [
                {
                    "enum": [
                        true
                    ],
                    "description": "True"
                },
                {
                    "enum": [
                        false
                    ],
                    "description": "False"
                }
            ],
            "default": false
        }
    }
}