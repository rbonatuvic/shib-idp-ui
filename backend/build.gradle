plugins {
    id "groovy"
    id "war"
    id "org.springframework.boot"
    id "io.freefair.lombok"
    id "com.gorylenko.gradle-git-properties" version "1.4.21"
    id "com.palantir.docker" version "0.28.0"
    id "com.palantir.docker-run" version "0.28.0"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

sourceCompatibility = 11
targetCompatibility = 11

test {
    useJUnitPlatform() // Needed by spock to find specification tests
}

repositories {
    jcenter()
    maven {
        url 'https://build.shibboleth.net/nexus/content/groups/public'
        artifactUrls = ['https://build.shibboleth.net/nexus/content/repositories/thirdparty-snapshots']
    }
    maven {  // for the springboot plugin
        url "https://plugins.gradle.org/m2/"
    }
    mavenLocal()
    mavenCentral()
}

configurations.all {
    resolutionStrategy {
        force "org.cryptacular:cryptacular:${project.'cryptacularVersion'}"

        eachDependency { details ->
            if (details.requested.group == 'org.seleniumhq.selenium' && details.requested.name != 'htmlunit-driver') {
                details.useVersion '4.7.0'
            }
        }
    }
}

configurations {
    integrationTestCompile {
        extendsFrom compile

    }
    integrationTestRuntime {
        extendsFrom runtime
    }
}

def generatedSrcDir = new File(buildDir, 'generated/src/main/java')

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy', 'src/main/java', generatedSrcDir]
        }
        java {
            srcDirs = []
        }
        resources {
            srcDir new File(buildDir, 'generated/ui')
        }
    }
    integrationTest {
        groovy {
            srcDirs = ['src/integration/groovy']
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources {
            srcDir 'src/integration/resources'
            srcDir new File(buildDir, 'generated/ui')
        }
    }

    enversTest {
        groovy {
            srcDir 'src/enversTest/groovy'
        }
        resources.srcDir 'src/enversTest/resources'
    }
}

processResources.dependsOn(':ui:npm_run_buildProd')

jar {
    enabled = true
    dependsOn 'copyApplicationYAML'
}

task copyApplicationYAML(type: Copy) {
    if ( "${project.'use.release.app.yml'}".toBoolean() ) {
        from 'src/main/app-resources/release.yml'
        into 'src/main/resources'
        rename { 'application.yml' }
    }
    else {
        from 'src/main/app-resources/default.yml'
        into 'src/main/resources'
        rename { 'application.yml' }
    }
}

//Integration of the frontend and backend into the build to have all of the UI resources available in the app's executable war
bootWar.dependsOn(':ui:npm_run_buildProd')
bootWar.baseName = 'shibui'
bootWar {
    manifest {
        attributes(
                "Manifest-Version" : "1.0",
                "Implementation-Version" : "${project.version}"
        )
    }
    from(tasks.findByPath(':ui:npm_run_buildProd').outputs) {
        //Copying into this particular classpath location due too
        //deployment to external Tomcat would not work with /public location
        //This way, it works with both embedded and external Tomcat
        into 'WEB-INF/classes/resources'
    }
    dependsOn 'copyApplicationYAML'
    archiveName = "${baseName}-${version}.war"
}

springBoot {
    mainClass = 'edu.internet2.tier.shibboleth.admin.ui.ShibbolethUiApplication'
    buildInfo()
}

generateLombokConfig.enabled = false

dependencies {
    // opensaml deps
    ['opensaml-saml-api', 'opensaml-saml-impl', 'opensaml-xmlsec-api', 'opensaml-xmlsec-impl'].each {
        compile "org.opensaml:${it}:${project.'opensamlVersion'}"
    }

    runtimeOnly "org.bouncycastle:bcprov-jdk15on:1.70"
    runtimeOnly "org.bouncycastle:bcprov-ext-jdk15on:1.70"
    runtimeOnly "org.bouncycastle:bcutil-jdk15on:1.70"
    runtimeOnly "org.bouncycastle:bcpkix-jdk15on:1.70"

    // shibboleth idp deps
    ['idp-profile-spring', 'idp-profile-api'].each {
        compile "net.shibboleth.idp:${it}:${project.'shibbolethVersion'}"
    }

    implementation "net.shibboleth.oidc:oidc-common-saml-api:${project.'shibOIDCVersion'}"

    // hibernate deps
    ['hibernate-core'].each {
        compile "org.hibernate:${it}:${project.'hibernateVersion'}"
    }

    // spring boot auto-config starters
    ['starter-web', 'starter-data-jpa', 'starter-security', 'starter-actuator', 'devtools', 'starter-webflux', 'starter-thymeleaf', 'starter-mail', 'starter-validation'].each {
        compile "org.springframework.boot:spring-boot-${it}"
    }
    // To override older version with security issue - https://www.lunasec.io/docs/blog/log4j-zero-day/
    implementation "org.apache.logging.log4j:log4j-to-slf4j:${project.'log4JVersion'}"
    implementation "org.apache.logging.log4j:log4j-api:${project.'log4JVersion'}"

    implementation "net.javacrumbs.shedlock:shedlock-spring:${project.'shedlockVersion'}"
    implementation "net.javacrumbs.shedlock:shedlock-provider-jdbc-template:${project.'shedlockVersion'}"

    // TODO: figure out what this should really be
    runtimeOnly "org.springframework.boot:spring-boot-starter-tomcat:${project.'springbootVersion'}"

    //Spring Configuration Annotation Processor - makes IntelliJ happy about @ConfigurationProperties
    compileOnly "org.springframework.boot:spring-boot-configuration-processor:${project.'springbootVersion'}"

    // lucene deps
    ['core', 'analyzers-common', 'queryparser'].each {
        compile "org.apache.lucene:lucene-${it}:${project.'luceneVersion'}"
    }

    compile "org.liquibase:liquibase-core"
    compile group: 'org.jadira.usertype', name: 'usertype.core', version: '6.0.1.GA'

    //For easy data mocking capabilities
    compile 'net.andreinc:mockneat:0.4.7'

    //So it works on Java 9 without explicitly requiring to load that module (needed by Hibernate)
    runtimeOnly 'javax.xml.bind:jaxb-api:2.3.0'
    // runtime libraries for later java versions
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:2.3.0'

    compile "com.h2database:h2"
    runtimeOnly "org.postgresql:postgresql:${project.'postgresVersion'}"
    runtimeOnly "org.mariadb.jdbc:mariadb-java-client:${project.'mariadbVersion'}"
    runtimeOnly "mysql:mysql-connector-java:${project.'mysqlVersion'}"
    runtimeOnly "com.microsoft.sqlserver:mssql-jdbc:${project.'sqlserverVersion'}"

    //Swagger 3
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.8'

    compile 'org.codehaus.groovy:groovy-all:3.0.10'
    testImplementation platform("org.spockframework:spock-bom:2.1-groovy-3.0")
    testImplementation "org.spockframework:spock-core"
    testImplementation "org.spockframework:spock-spring"

    testCompile "org.springframework.boot:spring-boot-starter-test:${project.'springbootVersion'}"
    testCompile "org.springframework.security:spring-security-test:${project.'springSecurityVersion'}"
    testCompile 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation "org.xmlunit:xmlunit-core:2.9.0"
    testImplementation "org.xmlunit:xmlunit-assertj:2.9.0"
    testRuntime 'cglib:cglib-nodep:3.2.5'

    compile "net.shibboleth.ext:spring-extensions:6.2.0"

    //JSON schema generator
    testCompile 'com.kjetland:mbknor-jackson-jsonschema_2.12:1.0.29'
    testCompile 'javax.validation:validation-api:2.0.1.Final'

    //JSON schema validator
    compile 'org.sharegov:mjson:1.4.1'

    integrationTestRuntime configurations.runtime
    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.compile
    integrationTestCompile 'com.saucelabs:sebuilder-interpreter:1.0.6'
    integrationTestCompile 'jp.vmi:selenese-runner-java:4.2.0'
    integrationTestCompile "org.springframework.boot:spring-boot-starter-test:${project.'springbootVersion'}"
    integrationTestCompile "org.springframework.security:spring-security-test:${project.'springSecurityVersion'}"
    integrationTestCompile platform("org.spockframework:spock-bom:2.1-groovy-3.0")
    integrationTestCompile "org.spockframework:spock-core"
    integrationTestCompile "org.spockframework:spock-spring"
    integrationTestRuntime "net.shibboleth.oidc:oidc-common-saml-api:${project.'shibOIDCVersion'}"

    // CSV file support
    compile 'com.opencsv:opencsv:4.4', {
        exclude group: 'commons-collections'
    }

    compile "org.apache.commons:commons-collections4:${project.'commonsCollections4Version'}"

    // Envers for persistent entities versioning
    compile "org.hibernate:hibernate-envers:${project.'hibernateVersion'}"

    //Pacj4 sub-project
    runtimeOnly project(':pac4j-module')

    //Beacon
    runtimeOnly project(':beacon:spring')

    enversTestCompile sourceSets.main.output
    enversTestCompile sourceSets.test.output
    enversTestCompile configurations.compile
    enversTestCompile configurations.testCompile
    enversTestCompile configurations.testImplementation

    enversTestRuntime configurations.testImplementation
    enversTestRuntime configurations.runtime
    enversTestRuntime configurations.testRuntime
}

task copyUI(type: Copy) {
    from tasks.findByPath(':ui:npm_run_buildProd').outputs
    into new File(buildDir, 'generated/ui/resources')
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    group = 'verification'
    description = 'Run various integration tests'
    dependsOn 'copyUI'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    systemProperties = System.properties
    systemProperties['user.dir'] = workingDir
    systemProperties['spring.profiles.include'] = 'very-dangerous'
}

task enversTest(type: Test) {
    useJUnitPlatform()
    group = 'verification'
    description = 'Run tests pertaing to envers versioning engine'
    testClassesDirs = sourceSets.enversTest.output.classesDirs
    classpath = sourceSets.enversTest.runtimeClasspath
    systemProperties = System.properties
    systemProperties['user.dir'] = workingDir
    useJUnitPlatform()
}

check {
    dependsOn enversTest
}

task generateSources {
    inputs.dir('src/main/templates')
    inputs.files fileTree('src/main/resources') {
        include '*-config.xml'
    }
    outputs.dir(generatedSrcDir)

    doLast {
        println "generating Builders"

        def processLine = { dest, template ->
            if (!dest.startsWith("org.opensaml")) {
                def token = dest.split('\\.')[-1].replace('Builder', '')
                def infile = file(template)
                def outfile = file("${generatedSrcDir}/${dest.replaceAll('\\.', '/')}.java")
                def outdir = file(outfile.parent)
                if (!outdir.exists()) {
                    outdir.mkdirs()
                }
                if (!outfile.exists()) {
                    println "creating class ${dest}"
                    outfile.withWriter { writer ->
                        infile.eachLine { line ->
                            writer.println(line.replaceAll('\\{\\{TOKEN}}', token))
                        }
                    }
                }
            }
        }

        def metadataBuilders = new XmlSlurper().parse(file('src/main/resources/jpa-saml2-metadata-config.xml'))
        metadataBuilders.ObjectProviders.ObjectProvider.BuilderClass.each {
            processLine(it['@className'].toString(), 'src/main/templates/MetadataBuilderTemplate.java')
        }

        def assertionBuilders = new XmlSlurper().parse(file('src/main/resources/jpa-saml2-assertion-config.xml'))
        assertionBuilders.ObjectProviders.ObjectProvider.BuilderClass.each {
            processLine(it['@className'].toString(), 'src/main/templates/AssertionBuilderTemplate.java')
        }

        ['jpa-default-config.xml', 'jpa-schema-config.xml'].each {
            def builders = new XmlSlurper().parse(file("src/main/resources/${it}"))
            builders.ObjectProviders.ObjectProvider.BuilderClass.each {
                processLine(it['@className'].toString(), 'src/main/templates/XSBuilderTemplate.java')
            }
        }

        def metadataUIBuilders = new XmlSlurper().parse(file('src/main/resources/jpa-saml2-metadata-ui-config.xml'))
        metadataUIBuilders.ObjectProviders.ObjectProvider.BuilderClass.each {
            processLine(it['@className'].toString(), 'src/main/templates/MetadataUIBuilderTemplate.java')
        }

        def xmlSecBuilders = new XmlSlurper().parse(file('src/main/resources/jpa-signature-config.xml'))
        xmlSecBuilders.ObjectProviders.ObjectProvider.BuilderClass.each {
            processLine(it['@className'].toString(), 'src/main/templates/XMLSecBuilderTemplate.java')
        }

        new XmlSlurper().parse(file('src/main/resources/jpa-saml2-metadata-algorithm-config.xml')).with { builders ->
            builders.ObjectProviders.ObjectProvider.BuilderClass.each {
                processLine(it['@className'].toString(), 'src/main/templates/AlgorithmBuilderTemplate.java')
            }
        }

        new XmlSlurper().parse(file('src/main/resources/jpa-signature-config.xml')).with { builders ->
            builders.ObjectProviders.ObjectProvider.BuilderClass.each {
                processLine(it['@className'].toString(), 'src/main/templates/SignatureBuilderTemplate.java')
            }
        }

        new XmlSlurper().parse(file('src/main/resources/jpa-shib-oidc-config.xml')).with { builders ->
            builders.ObjectProviders.ObjectProvider.BuilderClass.each {
                processLine(it['@className'].toString(), 'src/main/templates/OIDCBuilderTemplate.java')
            }
        }
    }
}

tasks.withType(JavaExec) {
    // Assign all Java system properties from
    // the command line to the JavaExec task which 'bootRun' task is a subclass of
    // so we could pass -Dstyle.system.props=to-bootRun-task
    systemProperties System.properties
}

compileJava {
    dependsOn generateSources
}

jacoco {
    toolVersion = '0.8.4'
}

jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination = file("${buildDir}/jacocoHtml")
    }
}

ext {
    now = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone('GMT'))
}

tasks.docker.dependsOn tasks.bootWar
docker {
    name 'unicon/shibui'
    tag 'version', "unicon/shibui:${project.version}${!project.version.endsWith('SNAPSHOT') ? '' : "-${now}"}"
    tag 'latest', "unicon/shibui:latest"
    pull true
    noCache true
    files tasks.bootWar.outputs
    files 'src/main/docker-files/loader.properties'
    buildArgs(['JAR_FILE': "shibui-${version}.war"])
}

tasks.dockerRun.dependsOn tasks.docker
dockerRun {
    name 'shibuiint'
    image 'unicon/shibui'
    ports '10101:8080'
    daemonize true
    command '--spring.profiles.include=very-dangerous,dev', '--shibui.default-password={noop}password'
    clean true
}