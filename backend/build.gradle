plugins {
    id 'groovy'
    id 'war'
    id 'org.springframework.boot' version '2.0.0.RELEASE'
    id 'com.gorylenko.gradle-git-properties' version '1.4.21'
    id 'net.researchgate.release' version '2.6.0'
    id 'io.franzbecker.gradle-lombok' version '1.13'
    id 'com.palantir.docker' version '0.20.1'
    id 'com.palantir.docker-run' version '0.20.1'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven {
        url 'https://build.shibboleth.net/nexus/content/groups/public'
        artifactUrls = ['https://build.shibboleth.net/nexus/content/repositories/thirdparty-snapshots']
    }
    mavenLocal()
}

configurations.all {
    resolutionStrategy {
        force 'org.cryptacular:cryptacular:1.1.3'
        
        eachDependency { details ->
            if (details.requested.group == 'org.seleniumhq.selenium' && details.requested.name != 'htmlunit-driver') {
                details.useVersion '3.141.59'
            }
        }
    }
}

configurations {
    integrationTestCompile {
        extendsFrom testCompile
        
    }
    integrationTestRuntime {
        extendsFrom testRuntime
    }
}

processResources.dependsOn(':ui:npm_run_buildProd')

//Integration of the frontend and backend into the build to have all of the UI resources available in the app's executable war
bootWar.dependsOn(':ui:npm_run_buildProd')
bootWar.baseName = 'shibui'
bootWar {
    manifest {
        attributes(
                "Manifest-Version" : "1.0",
                "Implementation-Version" : "${project.version}"
        )
    }
    from(tasks.findByPath(':ui:npm_run_buildProd').outputs) {
        // into '/'
        into '/public'
    }
    archiveName = "${baseName}-${version}.war"
}

bootJar.dependsOn ':ui:npm_run_buildProd'
bootJar.baseName = 'shibui'
bootJar {
    manifest {
        attributes(
                "Manifest-Version" : "1.0",
                "Implementation-Version" : "${project.version}",
                'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
        )
    }
    from(tasks.findByPath(':ui:npm_run_buildProd').outputs) {
        // into '/'
        into '/public'
    }
    archiveName = "${baseName}-${version}.jar"
}

springBoot {
    mainClassName = 'edu.internet2.tier.shibboleth.admin.ui.ShibbolethUiApplication'
    buildInfo()
}

lombok {
    version = "1.18.4"
    //TODO: get new sha256
    sha256 = ""
}

dependencies {
    // opensaml deps
    ['opensaml-saml-api', 'opensaml-saml-impl', 'opensaml-xmlsec-api', 'opensaml-xmlsec-impl'].each {
        compile "org.opensaml:${it}:${project.'opensaml.version'}"
    }

    // shibboleth idp deps
    ['idp-profile-spring', 'idp-profile-api'].each {
        compile "net.shibboleth.idp:${it}:${project.'shibboleth.version'}"
    }

    // hibernate deps
    ['hibernate-core'].each {
        compile "org.hibernate:${it}:${project.'hibernate.version'}"
    }

    // spring boot auto-config starters
    ['starter-web', 'starter-data-jpa', 'starter-security', 'starter-actuator', 'devtools', 'starter-webflux'].each {
        compile "org.springframework.boot:spring-boot-${it}"
    }
    // TODO: figure out what this should really be
    runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'

    //Spring Configuration Annotation Processor - makes IntelliJ happy about @ConfigurationProperties
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    // lucene deps
    ['core', 'analyzers-common', 'queryparser'].each {
        compile "org.apache.lucene:lucene-${it}:${project.'lucene.version'}"
    }

    compile "org.liquibase:liquibase-core"
    compile group: 'org.jadira.usertype', name: 'usertype.core', version: '6.0.1.GA'

    //For easy data mocking capabilities
    compile 'net.andreinc.mockneat:mockneat:0.1.4'

    compile 'org.codehaus.groovy:groovy-all:2.4.15'

    //So it works on Java 9 without explicitly requiring to load that module (needed by Hibernate)
    runtimeOnly 'javax.xml.bind:jaxb-api:2.3.0'

    // TODO: these will likely only be runtimeOnly or test scope, unless we want to ship the libraries with the final product
    compile "com.h2database:h2"
    runtimeOnly "org.postgresql:postgresql"
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:2.2.0'

    //Swagger
    compile 'io.springfox:springfox-swagger2:2.9.2'
    compile 'io.springfox:springfox-swagger-ui:2.9.2'

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.spockframework:spock-core:1.1-groovy-2.4"
    testCompile "org.spockframework:spock-spring:1.1-groovy-2.4"
    testCompile "org.xmlunit:xmlunit-core:2.5.1"
    testRuntime 'cglib:cglib-nodep:3.2.5'

    compile "net.shibboleth.ext:spring-extensions:5.4.0"

    //JSON schema generator
    testCompile 'com.kjetland:mbknor-jackson-jsonschema_2.12:1.0.29'
    testCompile 'javax.validation:validation-api:2.0.1.Final'
    
    //JSON schema validator
    compile 'org.sharegov:mjson:1.4.1'

    integrationTestCompile 'com.saucelabs:sebuilder-interpreter:1.0.6'
    integrationTestCompile 'jp.vmi:selenese-runner-java:3.19.2'
}

def generatedSrcDir = new File(buildDir, 'generated/src/main/java')

sourceSets {
    main {
        groovy {
            srcDirs = ['src/main/groovy', 'src/main/java', generatedSrcDir]
        }
        java {
            srcDirs = []
        }
    }
    integrationTest {
        groovy {
            srcDirs = ['src/integration/groovy']
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
        resources {
            srcDir 'src/integration/resources'
        }
    }
}

task integrationTest(type: Test) {
    group = 'verification'
    description = 'Run various integration tests'
    dependsOn 'dockerRun', 'runChecker'
    finalizedBy 'dockerStop'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    systemProperties = ['webdriver.gecko.driver': 'C:\\Users\\jj-unicon\\Downloads\\geckodriver-v0.21.0-win64\\geckodriver.exe']
}

task generateSources {
    inputs.dir('src/main/templates')
    inputs.files fileTree('src/main/resources') {
        include '*-config.xml'
    }
    outputs.dir(generatedSrcDir)

    doLast {
        println "generating Builders"

        def processLine = { dest, template ->
            if (!dest.startsWith("org.opensaml")) {
                def token = dest.split('\\.')[-1].replace('Builder', '')
                def infile = file(template)
                def outfile = file("${generatedSrcDir}/${dest.replaceAll('\\.', '/')}.java")
                def outdir = file(outfile.parent)
                if (!outdir.exists()) {
                    outdir.mkdirs()
                }
                if (!outfile.exists()) {
                    println "creating class ${dest}"
                    outfile.withWriter { writer ->
                        infile.eachLine { line ->
                            writer.println(line.replaceAll('\\{\\{TOKEN}}', token))
                        }
                    }
                }
            }
        }

        def metadataBuilders = new XmlSlurper().parse(file('src/main/resources/jpa-saml2-metadata-config.xml'))
        metadataBuilders.ObjectProviders.ObjectProvider.BuilderClass.each {
            processLine(it['@className'].toString(), 'src/main/templates/MetadataBuilderTemplate.java')
        }

        def assertionBuilders = new XmlSlurper().parse(file('src/main/resources/jpa-saml2-assertion-config.xml'))
        assertionBuilders.ObjectProviders.ObjectProvider.BuilderClass.each {
            processLine(it['@className'].toString(), 'src/main/templates/AssertionBuilderTemplate.java')
        }

        ['jpa-default-config.xml', 'jpa-schema-config.xml'].each {
            def builders = new XmlSlurper().parse(file("src/main/resources/${it}"))
            builders.ObjectProviders.ObjectProvider.BuilderClass.each {
                processLine(it['@className'].toString(), 'src/main/templates/XSBuilderTemplate.java')
            }
        }

        def metadataUIBuilders = new XmlSlurper().parse(file('src/main/resources/jpa-saml2-metadata-ui-config.xml'))
        metadataUIBuilders.ObjectProviders.ObjectProvider.BuilderClass.each {
            processLine(it['@className'].toString(), 'src/main/templates/MetadataUIBuilderTemplate.java')
        }

        def xmlSecBuilders = new XmlSlurper().parse(file('src/main/resources/jpa-signature-config.xml'))
        xmlSecBuilders.ObjectProviders.ObjectProvider.BuilderClass.each {
            processLine(it['@className'].toString(), 'src/main/templates/XMLSecBuilderTemplate.java')
        }
    }
}

tasks.withType(JavaExec) {
    // Assign all Java system properties from
    // the command line to the JavaExec task which 'bootRun' task is a subclass of
    // so we could pass -Dstyle.system.props=to-bootRun-task
    systemProperties System.properties
}

compileJava {
    dependsOn generateSources
}

jacoco {
    toolVersion = '0.8.1'
}

jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination = file("${buildDir}/jacocoHtml")
    }
}

tasks.docker.dependsOn tasks.bootJar
docker {
    name 'unicon/shibui'
    tags 'latest'
    pull true
    noCache true
    files tasks.bootJar.outputs
    files 'src/main/docker-files/loader.properties'
    buildArgs(['JAR_FILE': "shibui-${version}.jar"])
}

tasks.dockerRun.dependsOn tasks.docker
dockerRun {
    name 'shibuiint'
    image 'unicon/shibui'
    ports '8080:8080'
    daemonize true
    command '--spring.profiles.include=no-auth'
    clean true
}

task runChecker << {
    def ready = false
    while (!ready) {
        try {
            ready = 'http://localhost:8080'.toURL().text.length() > 0
        } catch (IOException e) {
            println 'cannot reach site'
            sleep 5000
        }
    }
}